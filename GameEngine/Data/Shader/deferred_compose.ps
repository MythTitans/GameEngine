#version 330

in vec2 uv;

out vec4 finalColor;

uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform mat4 inverseViewProjection;

uniform vec3 lightPositions[ 128 ];
uniform int lightCount;

void main()
{
    vec4 position = vec4( 2.0 * vec3( uv.x, uv.y, texture( depthMap, uv).r ) - vec3( 1.0 ), 1.0 );
    position = inverseViewProjection * position;
    position /= position.w;

    vec3 normal = normalize( 2.0 * texture( normalMap, uv ).rgb - vec3( 1.0 ) );

    float intensity = 0.0;
    for( int i = 0; i < lightCount; ++i )
    {
        intensity += max( dot( normalize( lightPositions[ i ] - position.xyz ), normal ), 0.0 );
    }

    float diff1 = max( dot( normalize( lightPositions[ 0 ] - position.xyz ), normal ), 0.0 ) > 0.0 ? 1.0 : 0.0;
    float diff2 = max( dot( normalize( lightPositions[ 1 ] - position.xyz ), normal ), 0.0 ) > 0.0 ? 1.0 : 0.0;

    finalColor = vec4( clamp( intensity * texture( colorMap, uv ).rgb, vec3( 0.0 ), vec3( 1.0 ) ), 1.0 );
    //finalColor = 0.25 * vec4( diff1, diff2, 0.0, 1.0 );
    //finalColor = vec4( normal, 1.0 );
}