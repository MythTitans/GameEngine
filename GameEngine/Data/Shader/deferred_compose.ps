#version 330

#define MAX_DIRECTIONAL_LIGHT_COUNT 2
#define MAX_POINT_LIGHT_COUNT 8
#define MAX_SPOT_LIGHT_COUNT 6

in vec2 uv;

out vec4 finalColor;

uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform mat4 inverseViewProjection;

uniform vec3 directionalLightDirections[ MAX_DIRECTIONAL_LIGHT_COUNT ];
uniform vec3 directionalLightColors[ MAX_DIRECTIONAL_LIGHT_COUNT ];
uniform float directionalLightIntensities[ MAX_DIRECTIONAL_LIGHT_COUNT ];
uniform int directionalLightCount;

uniform vec3 pointLightPositions[ MAX_POINT_LIGHT_COUNT ];
uniform vec3 pointLightColors[ MAX_POINT_LIGHT_COUNT ];
uniform float pointLightIntensities[ MAX_POINT_LIGHT_COUNT ];
uniform float pointLightFalloffMinDistances[ MAX_POINT_LIGHT_COUNT ];
uniform float pointLightFalloffMaxDistances[ MAX_POINT_LIGHT_COUNT ];
uniform int pointLightCount;

uniform vec3 spotLightPositions[ MAX_SPOT_LIGHT_COUNT ];
uniform vec3 spotLightDirections[ MAX_SPOT_LIGHT_COUNT ];
uniform vec3 spotLightColors[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightIntensities[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightOuterRanges[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightRanges[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightFalloffMinDistances[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightFalloffMaxDistances[ MAX_SPOT_LIGHT_COUNT ];
uniform int spotLightCount;

void main()
{
    vec4 position = vec4( 2.0 * vec3( uv.x, uv.y, texture( depthMap, uv).r ) - vec3( 1.0 ), 1.0 );
    position = inverseViewProjection * position;
    position /= position.w;

    vec3 normal = normalize( 2.0 * texture( normalMap, uv ).rgb - vec3( 1.0 ) );

    vec3 intensity = vec3( 0.0 );

    for( int i = 0; i < directionalLightCount; ++i )
    {
        float lightIntensity = directionalLightIntensities[ i ];
        float surfaceExposure = max( dot( -normalize( directionalLightDirections[ i ] ), normal ), 0.0 );
        intensity += lightIntensity * surfaceExposure * directionalLightColors[ i ];
    }

    for( int i = 0; i < pointLightCount; ++i )
    {
        vec3 positionToLight = pointLightPositions[ i ] - position.xyz;
        float minSquareDist = pointLightFalloffMinDistances[ i ] * pointLightFalloffMinDistances[ i ];
        float maxSquareDist = pointLightFalloffMaxDistances[ i ] * pointLightFalloffMaxDistances[ i ];
        float squareDist = dot( positionToLight, positionToLight );
        float attenuation = ( 1.0 - smoothstep( minSquareDist, maxSquareDist, squareDist ) );
        float lightIntensity = pointLightIntensities[ i ] * attenuation;

        vec3 pointToLightDirection = normalize( pointLightPositions[ i ] - position.xyz );
        float surfaceExposure = max( dot( pointToLightDirection, normal ), 0.0 );
        intensity += lightIntensity * surfaceExposure * pointLightColors[ i ];
    }

    for( int i = 0; i < spotLightCount; ++i )
    {
        vec3 positionToLight = spotLightPositions[ i ] - position.xyz;
        float minSquareDist = spotLightFalloffMinDistances[ i ] * spotLightFalloffMinDistances[ i ];
        float maxSquareDist = spotLightFalloffMaxDistances[ i ] * spotLightFalloffMaxDistances[ i ];
        float squareDist = dot( positionToLight, positionToLight );
        float attenuation = ( 1.0 - smoothstep( minSquareDist, maxSquareDist, squareDist ) );
        float lightIntensity = spotLightIntensities[ i ] * attenuation;

        vec3 pointToLightDirection = normalize( spotLightPositions[ i ] - position.xyz );
        float surfaceExposure = dot( pointToLightDirection, normal ) * clamp( ( dot( pointToLightDirection, -normalize( spotLightDirections[ i ] ) ) - spotLightOuterRanges[ i ] ) / spotLightRanges[ i ], 0.0, 1.0 );
        intensity += lightIntensity * surfaceExposure * spotLightColors[ i ];
    }
    
    vec3 color = clamp( intensity * texture( colorMap, uv ).rgb, 0.0, 1.0 );
    finalColor = vec4( color, 1.0 );
}