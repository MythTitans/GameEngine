#version 330

#define MAX_LIGHT_COUNT 16

in vec2 uv;

out vec4 finalColor;

uniform sampler2D colorMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;

uniform mat4 inverseViewProjection;

uniform vec3 lightPositions[ MAX_LIGHT_COUNT ];
uniform vec3 lightColors[ MAX_LIGHT_COUNT ];
uniform float lightIntensities[ MAX_LIGHT_COUNT ];
uniform float lightFalloffFactor[ MAX_LIGHT_COUNT ];
uniform int lightCount;

void main()
{
    vec4 position = vec4( 2.0 * vec3( uv.x, uv.y, texture( depthMap, uv).r ) - vec3( 1.0 ), 1.0 );
    position = inverseViewProjection * position;
    position /= position.w;

    vec3 normal = normalize( 2.0 * texture( normalMap, uv ).rgb - vec3( 1.0 ) );

    vec3 intensity = vec3( 0.0 );
    for( int i = 0; i < lightCount; ++i )
    {
        vec3 positionToLight = lightPositions[ i ] - position.xyz;
        float lightIntensity = lightIntensities[ i ] * ( 1.0 / ( 1.0 + lightFalloffFactor[ i ] * dot( positionToLight, positionToLight ) ) );

        vec3 lightDirection = normalize( lightPositions[ i ] - position.xyz );
        intensity += lightIntensity * max( dot( lightDirection, normalize( normal ) ), 0.0 ) * lightColors[ i ];
    }
    
    vec3 color = clamp( intensity * texture( colorMap, uv ).rgb, 0.0, 1.0 );
    finalColor = vec4( color, 1.0 );
}