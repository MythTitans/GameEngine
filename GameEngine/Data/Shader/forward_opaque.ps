#version 330

#define MAX_LIGHT_COUNT 16

in vec2 texCoords;
in vec3 position;
in vec3 normal;
in vec3 tangent;
in vec3 bitangent;

out vec4 finalColor;

uniform vec3 diffuseColor;
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;

uniform vec3 lightPositions[ MAX_LIGHT_COUNT ];
uniform vec3 lightColors[ MAX_LIGHT_COUNT ];
uniform float lightIntensities[ MAX_LIGHT_COUNT ];
uniform float lightFalloffFactor[ MAX_LIGHT_COUNT ];
uniform int lightCount;

void main()
{
    mat3 TBN = mat3( normalize( tangent ), normalize( bitangent ), normalize( normal ) );

    vec3 tangentSpaceNormal = 2.0 * texture( normalMap, texCoords).rgb - vec3( 1.0 );
    vec3 worldSpaceNormal = TBN * tangentSpaceNormal;

    vec3 intensity = vec3( 0.0 );
    for( int i = 0; i < lightCount; ++i )
    {
        vec3 positionToLight = lightPositions[ i ] - position;
        float lightIntensity = lightIntensities[ i ] * ( 1.0 / ( 1.0 + lightFalloffFactor[ i ] * dot( positionToLight, positionToLight ) ) );

        vec3 lightDirection = normalize( lightPositions[ i ] - position );
        intensity += lightIntensity * max( dot( lightDirection, normalize( worldSpaceNormal ) ), 0.0 ) * lightColors[ i ];
    }
    
    vec3 color = clamp( intensity * diffuseColor * texture( diffuseMap, texCoords ).rgb, 0.0, 1.0 );
    finalColor = vec4( color, 1.0 );
}