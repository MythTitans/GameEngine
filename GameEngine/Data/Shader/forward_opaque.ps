#version 330

#define MAX_DIRECTIONAL_LIGHT_COUNT 2
#define MAX_POINT_LIGHT_COUNT 8
#define MAX_SPOT_LIGHT_COUNT 6

in vec2 texCoords;
in vec3 position;
in vec3 normal;
in vec3 tangent;
in vec3 bitangent;

out vec4 finalColor;

uniform vec3 viewPosition;

uniform vec3 diffuseColor;
uniform sampler2D diffuseMap;
uniform sampler2D normalMap;
uniform vec3 specularColor;
uniform float shininess;

uniform vec3 directionalLightDirections[ MAX_DIRECTIONAL_LIGHT_COUNT ];
uniform vec3 directionalLightColors[ MAX_DIRECTIONAL_LIGHT_COUNT ];
uniform float directionalLightIntensities[ MAX_DIRECTIONAL_LIGHT_COUNT ];
uniform int directionalLightCount;

uniform vec3 pointLightPositions[ MAX_POINT_LIGHT_COUNT ];
uniform vec3 pointLightColors[ MAX_POINT_LIGHT_COUNT ];
uniform float pointLightIntensities[ MAX_POINT_LIGHT_COUNT ];
uniform float pointLightFalloffMinDistances[ MAX_POINT_LIGHT_COUNT ];
uniform float pointLightFalloffMaxDistances[ MAX_POINT_LIGHT_COUNT ];
uniform int pointLightCount;

uniform vec3 spotLightPositions[ MAX_SPOT_LIGHT_COUNT ];
uniform vec3 spotLightDirections[ MAX_SPOT_LIGHT_COUNT ];
uniform vec3 spotLightColors[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightIntensities[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightOuterRanges[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightRanges[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightFalloffMinDistances[ MAX_SPOT_LIGHT_COUNT ];
uniform float spotLightFalloffMaxDistances[ MAX_SPOT_LIGHT_COUNT ];
uniform int spotLightCount;

void main()
{
    vec4 diffuseTextureColor = texture( diffuseMap, texCoords );
    if( diffuseTextureColor.a < 0.001 )
        discard;

    mat3 TBN = mat3( normalize( tangent ), normalize( bitangent ), normalize( normal ) );

    vec3 tangentSpaceNormal = 2.0 * texture( normalMap, texCoords).rgb - vec3( 1.0 );
    vec3 worldSpaceNormal = normalize( TBN * tangentSpaceNormal );

    vec3 pointToViewDirection = normalize( viewPosition - position );

    vec3 diffuseIntensity = vec3( 0.0 );
    vec3 specularIntensity = vec3( 0.0 );

    for( int i = 0; i < directionalLightCount; ++i )
    {
        float lightIntensity = directionalLightIntensities[ i ];
        float surfaceExposure = max( dot( -directionalLightDirections[ i ], worldSpaceNormal ), 0.0 );
        diffuseIntensity += lightIntensity * surfaceExposure * directionalLightColors[ i ];

        vec3 halfVector = normalize( -directionalLightDirections[ i ] + pointToViewDirection );
        float surfaceHighlight = pow( max( dot( halfVector, worldSpaceNormal ), 0.0 ), shininess );
        specularIntensity += lightIntensity * surfaceHighlight * pointLightColors[ i ];
    }

    for( int i = 0; i < pointLightCount; ++i )
    {
        vec3 positionToLight = pointLightPositions[ i ] - position;
        float minSquareDist = pointLightFalloffMinDistances[ i ] * pointLightFalloffMinDistances[ i ];
        float maxSquareDist = pointLightFalloffMaxDistances[ i ] * pointLightFalloffMaxDistances[ i ];
        float squareDist = dot( positionToLight, positionToLight );
        float attenuation = ( 1.0 - smoothstep( minSquareDist, maxSquareDist, squareDist ) );
        float lightIntensity = pointLightIntensities[ i ] * attenuation;

        vec3 pointToLightDirection = normalize( pointLightPositions[ i ] - position );
        float surfaceExposure = max( dot( pointToLightDirection, worldSpaceNormal ), 0.0 );
        diffuseIntensity += lightIntensity * surfaceExposure * pointLightColors[ i ];

        vec3 halfVector = normalize( pointToLightDirection + pointToViewDirection );
        float surfaceHighlight = pow( max( dot( halfVector, worldSpaceNormal ), 0.0 ), shininess );
        specularIntensity += lightIntensity * surfaceHighlight * pointLightColors[ i ];
    }

    for( int i = 0; i < spotLightCount; ++i )
    {
        vec3 positionToLight = spotLightPositions[ i ] - position;
        float minSquareDist = spotLightFalloffMinDistances[ i ] * spotLightFalloffMinDistances[ i ];
        float maxSquareDist = spotLightFalloffMaxDistances[ i ] * spotLightFalloffMaxDistances[ i ];
        float squareDist = dot( positionToLight, positionToLight );
        float attenuation = ( 1.0 - smoothstep( minSquareDist, maxSquareDist, squareDist ) );
        float lightIntensity = spotLightIntensities[ i ] * attenuation;

        vec3 pointToLightDirection = normalize( spotLightPositions[ i ] - position );
        float spotExposure = clamp( ( dot( pointToLightDirection, -normalize( spotLightDirections[ i ] ) ) - spotLightOuterRanges[ i ] ) / spotLightRanges[ i ], 0.0, 1.0 );
        float surfaceExposure = dot( pointToLightDirection, worldSpaceNormal ) * spotExposure;
        diffuseIntensity += lightIntensity * surfaceExposure * spotLightColors[ i ];

        vec3 halfVector = normalize( pointToLightDirection + pointToViewDirection );
        float surfaceHighlight = pow( max( dot( halfVector, worldSpaceNormal ), 0.0 ), shininess ) * spotExposure;
        specularIntensity += lightIntensity * surfaceHighlight * spotLightColors[ i ];
    }
    
    vec3 color = clamp( diffuseIntensity * diffuseColor * diffuseTextureColor.rgb + specularIntensity * specularColor * diffuseTextureColor.rgb, 0.0, 1.0 );
    finalColor = vec4( color, 1.0 );
}